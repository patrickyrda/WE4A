<?php

namespace App\Controller;

use App\Entity\User;
use App\Form\UserType;
use App\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;
use Symfony\Component\Serializer\SerializerInterface;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

use Symfony\Component\Security\Http\Attribute\IsGranted;
/**
 * This is the CRUD controller for the User Entity generated by Symfony Maker Bundle. It was altered to fit the needs of the application. In special the returns.
 *  
 */
#[IsGranted('ROLE_ADMIN')]
final class UserAdminController extends AbstractController{

    /**
     * This is the API responsible for sending the html table with the list of users.
     * It does not return the full page, only the table. The table is rendered by javascript in the front end, to allow the dynamical loading of the tables in the Admin page.
     * It returns the html table as a json response.
     * 
     */
    #[Route('/user/admin', name: 'app_user_admin_index')]
    public function index(UserRepository $userRepository, Request $request): Response
    {   
        $users = $userRepository->findAll();;
        if ($request->isXmlHttpRequest()) {
            $html = $this->renderView('user_admin/_table.html.twig', [
                'users' => $users,
            ]);
    
            return $this->json([
                'success' => true,
                'html'    => $html,
            ]);
        }
    
        return $this->render('user_admin/index.html.twig', [
            'users' => $users,
        ]);
    }

    /**
     * This is the API responsible for creating a new user.
     * When receiving a GET request, it returns the html form to be displayed in the modal.
     * When receiving a POST request, it handles the form submission and creates the new user.
     */
    #[Route('user/new', name: 'app_user_admin_new', methods: ['GET', 'POST'])]
    public function new(Request $request, EntityManagerInterface $entityManager, UserPasswordHasherInterface $userPasswordHasher): Response
    {
        $user = new User();
        $form = $this->createForm(UserType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $plainPassword = $form->get('plainPassword')->getData();
            if (!$plainPassword) {
                // Set a default password for the user creation 
                $plainPassword = 'password120';
            }
            $user->setPassword($userPasswordHasher->hashPassword($user, $plainPassword));
            $entityManager->persist($user);
            $entityManager->flush();

           
            
            return $this->json([
                 'success' => true,
                  'message' => 'User created successfully',
            ]);
            
        }

        
        return $this->json([
            'form' => $this->renderView('user_admin/_form.html.twig', [
                'user' => $user,
                'form' => $form->createView(),
            ]),
        ]);
      

    }


#[Route('user/{id}', name: 'app_user_admin_show', methods: ['GET'])]
public function show(User $user, Request $request): Response
{
    if ($request->isXmlHttpRequest()) {
        return $this->json([
            'content' => $this->renderView('user_admin/show.html.twig', [
                'user' => $user,
            ])
        ]);
    }

    return $this->render('user_admin/show.html.twig', [
        'user' => $user,
    ]);
}
    /**
     * This is the API responsible for updating a user.
     * When receiving a GET request, it returns the html form to be displayed in the modal.
     * When receiving a POST request, it handles the form submission and updates the user.
     * Modification of the password is optional. If the password is not changed, it will not be updated.
     * The password is hashed before being saved to the database.
     */
    #[Route('user/{id}/edit', name: 'app_user_admin_edit', methods: ['GET', 'POST'])]
    public function edit(Request $request, User $user, EntityManagerInterface $entityManager, UserPasswordHasherInterface $userPasswordHasher): Response
    {
        $form = $this->createForm(UserType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            
            $plainPassword = $form->get('plainPassword')->getData();
            if ($plainPassword) {
                $user->setPassword($userPasswordHasher->hashPassword($user, $plainPassword));
            } 
           
            $entityManager->flush();

            return $this->json([
                'success' => true,
                'message' => 'User updated successfully'
            ]);
        }

        return $this->json([
            'form' => $this->renderView('user_admin/_form.html.twig', [
                'user' => $user,
                'form' => $form->createView(),
                ])
            ]);
    }

    /*
    *   This is the API responsible for deleting a user.   
    *   
    */

    #[Route('user/{id}', name: 'app_user_admin_delete', methods: ['POST'])]
    public function delete(Request $request, User $user, EntityManagerInterface $entityManager): Response
    {
        if ($this->isCsrfTokenValid('delete' . $user->getId(), $request->request->get('_token'))) {
            $entityManager->remove($user);
            $entityManager->flush();

            return $this->json(['success' => true]);

        }

        return $this->json(['success' => false], 400);
    }
}

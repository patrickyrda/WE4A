<?php

namespace App\Controller;

use App\Entity\UE;
use App\Form\UEType;
use App\Repository\UERepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;
use Symfony\Component\Serializer\SerializerInterface;
use Symfony\Component\HttpFoundation\JsonResponse;
use App\Repository\UserRepository;
use Symfony\Component\String\Slugger\SluggerInterface;

/**
 * 
 *  This is the CRUD controller for the UE Entity generated by Symfony Maker Bundle. It was altered to fit the needs of the application. In special the returns, and file handling.
 *  
 *  
 */
use Symfony\Component\Security\Http\Attribute\IsGranted;
#[IsGranted('ROLE_ADMIN')]
final class UEAdminController extends AbstractController{
    /**
     * 
     *  This is the API responsible for sending the html table with the list of UEs.
     *  It does not return the full page, only the table. The table is rendered by javascript in the front end, to allow the dynamical loading of the tables in the Admin page.
     *  It returns the html table as a json response.
     * 
     *  */ 
    #[Route('/ue/admin',name: 'app_u_e_admin_index', methods: ['GET'])]
    public function index(UERepository $ueRepository, Request $request): Response
    {
        // On recupere les ue dans la bdd
        $ues = $ueRepository->findAll();

        // On verifie pour une requete AJAX
        if ($request->isXmlHttpRequest()) {
            // rendu du partial uniquement
            $html = $this->renderView('ue_admin/_table.html.twig', [
                'u_es' => $ues,
            ]);

            return $this->json([
                'success' => true,
                'html'    => $html,
            ]);
        }
        // Si c'est pas une requete AJAX, on renvoie la page complete
        return $this->render('ue_admin/index.html.twig', [
            'u_es' => $ues,
        ]);
    }

    /**
     * 
     *  This is the API responsible for creating a new UE.
     *  When receaiving a GET request, it returns the html form to be displayed in the modal.
     *  When receiving a POST request, it handles the form submission and creates the new UE.
     *  It also handles the image upload.
     */
    #[Route('ue/new', name: 'app_u_e_admin_new', methods: ['GET', 'POST'])]
    public function new(Request $request, EntityManagerInterface $entityManager, SluggerInterface $slugger): Response
    {

        $uE = new UE();
        $form = $this->createForm(UEType::class, $uE);
        $form->handleRequest($request);

        // On traite le formulaire
        if ($form->isSubmitted() && $form->isValid()) {

            $imageFile = $form->get('image_path')->getData();

            if ($imageFile) {
                
                $originalFilename = pathinfo($imageFile->getClientOriginalName(), PATHINFO_FILENAME);
                $safeFilename = $slugger->slug($originalFilename);
                $newFilename = $safeFilename.'-'.uniqid().'.'.$imageFile->guessExtension();

                try {
                    $imageFile->move(
                        $this->getParameter('images_directory'), 
                        $newFilename
                    );
                } catch (FileException $e) {
                    return $this->json(['success' => false, 'message' => 'File upload failed']);
                }

                $uE->setImagePath('uploads/ue_images/' . $newFilename);
            } else {
                //Add default image path if no image is uploaded
                //TODO: here change that
                $uE->setImagePath('uploads/ue_images/default.jpg'); 
            }

            $entityManager->persist($uE);
            $entityManager->flush();
            return $this->json([
                'success' => true,
                'message' => 'UE created successfully']);
        }

        // On revoie le fragment HTML du formulaire
        return $this->json([
            'form' => $this->renderView('ue_admin/_form.html.twig', [
                'u_e' => $uE,
                'form' => $form->createView()
            ])
        ]);
    }

    /**
     * 
     *  This is the route responsible for displaying the details of a UE. It also sends the list of Users that are not enrolled in the UE, so that the admin can enroll them.
     *  
     */

    #[Route('ue/{id}', name: 'app_u_e_admin_show', methods: ['GET'])]
    public function show(UE $uE, UserRepository $userRepository): Response
    {   
        // On recupere les id des utilisateurs inscrits
        $enrolledIds = array_map(
            fn($ins) => $ins->getUserId()->getId(),
            $uE->getInscriptions()->toArray()
        );

        // Selection of the users that are not enrolled in the UE
        $availableStudents = $userRepository->createQueryBuilder('u')
            ->andWhere('JSON_CONTAINS(u.roles, :role) = 1 OR JSON_CONTAINS(u.roles, :teacherRole) = 1')
            ->setParameter('role', '"ROLE_STUDENT"')
            ->setParameter('teacherRole', '"ROLE_TEACHER"')
            ->andWhere('u.id NOT IN (:ids)')
            ->setParameter('ids', $enrolledIds ?: [0])
            ->getQuery()
            ->getResult();

        // On renvoie la page avec les ue et la liste des étudiants
        return $this->render('ue_admin/show.html.twig', [
            'u_e' => $uE,
            'availableStudents' => $availableStudents,
        ]);
    }
    /**
     *  This is the API responsible for handling the editing of a UE.
     *  When receiving a GET request, it returns the html form to be displayed in the modal.
     *  When receiving a POST request, it handles the form submission and updates the UE.
     *  It expects a UE id in the GET request. It uses Symfony's ParamConverter to automatically convert the id to a UE entity.
     *  The form is also rendered pre-filled with the data of the UE to be edited.
     *  It also handles the image upload.
     */

    #[Route('ue/{id}/edit', name: 'app_u_e_admin_edit', methods: ['GET', 'POST'])]
    public function edit(Request $request, UE $uE, EntityManagerInterface $entityManager, SluggerInterface $slugger): Response
    {
        // On cree le formulaire pre rempli
        $form = $this->createForm(UEType::class, $uE);
        $form->handleRequest($request);

        // On verifie si le formulaire a été soumis et valide
        if ($form->isSubmitted() && $form->isValid()) {
            
            $imageFile = $form->get('image_path')->getData();

            if ($imageFile) {
                
                $oldImagePath = $uE->getImagePath();
                $defaultImagePath = 'uploads/ue_images/default.jpg'; 

                if ($oldImagePath && $oldImagePath !== $defaultImagePath) {
                    $fullOldPath = $this->getParameter('images_directory') . '/' . basename($oldImagePath);
                    if (file_exists($fullOldPath)) {
                        unlink($fullOldPath);
                    }
                }

                $originalFilename = pathinfo($imageFile->getClientOriginalName(), PATHINFO_FILENAME);
                $safeFilename = $slugger->slug($originalFilename);
                $newFilename = $safeFilename.'-'.uniqid().'.'.$imageFile->guessExtension();

                try {
                    $imageFile->move(
                        $this->getParameter('images_directory'), 
                        $newFilename
                    );
                } catch (FileException $e) {
                    return $this->json(['success' => false, 'message' => 'File upload failed']);
                }

                $uE->setImagePath('uploads/ue_images/' . $newFilename);
            }
            
            $entityManager->flush();

            return $this->json([
                'success' => true,
                'message' => 'UE updated successfully']);
        }
        
        // SInon on revoie le fragment HTML du formulaire
        return $this->json([
            'form' => $this->renderView('ue_admin/_form.html.twig', [
                'u_e' => $uE,
                'form' => $form->createView()
            ])
        ]);
    }
    /*
    *   This API is responsible for deleting a UE. 
    * 
    */
    #[Route('ue/{id}', name: 'app_u_e_admin_delete', methods: ['POST'])]
    public function delete(Request $request, UE $uE, EntityManagerInterface $entityManager): Response
    {
        if ($this->isCsrfTokenValid('delete'.$uE->getId(), $request->getPayload()->getString('_token'))) {
            $entityManager->remove($uE);
            $entityManager->flush();

            return $this->json(['success' => true]);
        }

        return $this->json(['success' => false], 400);
    }
}

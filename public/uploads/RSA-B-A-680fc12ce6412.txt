# -*- coding: utf-8 -*-


# @author: Mr ABBAS-TURKI

import hashlib
import binascii

def home_mod_expnoent(x,y,n): #exponentiation modulaire
    i=0
    R1=1
    R2=x
    d=bin(y)[2:][::-1]
    for i in range(len(d)):
        if d[i] == "1":
            R1=(R1*R2)%n
        R2=(R2*R2)%n
    return R1

def home_ext_euclide(y,b): #algorithme d'euclide étendu pour la recherche de l'exposant secret
    if b==0:
        return 0
    u0,u1,u2 = 1,0,y
    v0,v1,v2 = 0,1,b
    while v2 != 0:
        q = u2 // v2
        u0,u1,u2,v0,v1,v2 = v0,v1,v2,u0-q*v0,u1-q*v1,u2-q*v2
    if u1 < 0:
        u1 += y
    return u1

def home_pgcd(a,b): #recherche du pgcd
    if(b==0): 
        return a 
    else: 
        return home_pgcd(b,a%b)

def home_string_to_int(x): # pour transformer un string en int
    z=0
    for i in reversed(range(len(x))):
        z=int(ord(x[i]))*pow(2,(8*i))+z
    return(z)


def home_int_to_string(x): # pour transformer un int en string
    txt=''
    res1=x
    while res1>0:
        res=res1%(pow(2,8))
        res1=(res1-res)//(pow(2,8))
        txt=txt+chr(res)
    return txt




def mot10char(): #entrer le secret
    secret=input("donner un secret de 30 caractères au maximum : ")
    while (len(secret)>31):
        secret=input("c'est beaucoup trop long, 10 caractères S.V.P : ")
    return(secret)
    

#voici les éléments de la clé d'Alice
x1a=79669386757152134082281847240095421610305141418057 #p
x2a=22438608225408889130930375066853161744373941492551 #q
na=x1a*x2a  #n
phia=((x1a-1)*(x2a-1))//home_pgcd(x1a-1,x2a-1)
ea=17 #exposant public
da=home_ext_euclide(phia,ea) #exposant privé
#voici les éléments de la clé de bob
x1b=22865989079763946294067352730384888597646770611263 #p
x2b=25694884215472633843288678549255149037353843982907 #q
nb=x1b*x2b # n
phib=((x1b-1)*(x2b-1))//home_pgcd(x1b-1,x2b-1)
eb=23 # exposants public
db=home_ext_euclide(phib,eb) #exposant privé



print("Vous êtes Bob, vous souhaitez envoyer un secret à Alice")
print("voici votre clé publique que tout le monde a le droit de consulter")
print("n =",nb)
print("exposant :",eb)
print("voici votre précieux secret")
print("d =",db)
print("*******************************************************************")
print("Voici aussi la clé publique d'Alice que tout le monde peut conslter")
print("n =",na)
print("exposent :",ea)
print("*******************************************************************")
print("il est temps de lui envoyer votre secret ")
print("*******************************************************************")
x=input("appuyer sur entrer")
secret=mot10char()
print("*******************************************************************")
print("voici la version en nombre décimal de ",secret," : ")
num_sec=home_string_to_int(secret)
print(num_sec)
print("voici le message chiffré avec la publique d'Alice : ")
chif=home_mod_expnoent(num_sec, ea, na)
print(chif)
print("*******************************************************************")
# print("On utilise la fonction de hashage MD5 pour obtenir le hash du message",secret)
# Bhachis0=hashlib.md5(secret.encode(encoding='UTF-8',errors='strict')).digest() #MD5 du message
print("On utilise la fonction de hashage sha256 pour obtenir le hash du message",secret)
Bhachis0=hashlib.sha256(secret.encode(encoding='UTF-8',errors='strict')).digest() #sha256 du message
print("voici le hash en nombre décimal ")
Bhachis0 = hashlib.sha256(secret.encode('utf-8')).digest()
Bhachis3 = int.from_bytes(Bhachis0, byteorder='big')
signe = home_mod_expnoent(Bhachis3, db, nb)
print(Bhachis3)
print("voici la signature avec la clé privée de Bob du hachis")
signe=home_mod_expnoent(Bhachis3, db, nb)
print(signe)
print("*******************************************************************")
print("Bob envoie \n \t 1-le message chiffré avec la clé public d'Alice \n",chif,"\n \t 2-et le hash signé \n",signe)
print("*******************************************************************")
x=input("appuyer sur entrer")
print("*******************************************************************")
print("Alice déchiffre le message chiffré \n",chif,"\nce qui donne ")
dechif=home_int_to_string(home_mod_expnoent(chif, da, na))
print(dechif)
print("*******************************************************************")
print("Alice déchiffre la signature de Bob \n",signe,"\n ce qui donne  en décimal")
designe=home_mod_expnoent(signe, eb, nb)
print(designe)
print("Alice vérifie si elle obtient la même chose avec le hash de ",dechif)
# Ahachis0=hashlib.md5(dechif.encode(encoding='UTF-8',errors='strict')).digest()
Ahachis0 = hashlib.sha256(dechif.encode('utf-8')).digest()
Ahachis3 = int.from_bytes(Ahachis0, byteorder='big')
print(Ahachis3)
print("La différence =",Ahachis3-designe)
if (Ahachis3-designe==0):
    print("Alice : Bob m'a envoyé : ",dechif)
else:
    print("oups")
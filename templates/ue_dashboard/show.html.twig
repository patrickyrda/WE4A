{# Affichage vue detaillée d'une ue pour étudiant#}
{% extends 'base.html.twig' %}
{% block title %}{{ u_e.code }} – {{ u_e.title }}{% endblock %}
{% block head %}
<script src="jquery-3.7.1.min.js"></script>
{% endblock %}
{% block body %}
    <div class="bandeau">
        <a class="connexion" href="{{ path('app_user_dashboard') }}">Mes cours</a>
    </div>
{# Conteneur principal de la vue UE #}
<div class="container">
    <div class="rectangle">
      {# En-tete avec code, le titre et le bouton de création#}
   <div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="h3 mb-0">
      {{ u_e.code }} – {{ u_e.title }}
    </h1>
    {% if is_granted('ROLE_TEACHER') %}
      <a class="btn btn-primary"
        id="create-post-btn"
        href=#
        data-ue-id = "{{ u_e.id }}">
        Créer un nouveau post
      </a>
    {% endif %}
  </div>
  {# Bouton pour afficher/cacher la liste des participants #}
  <button
    class="btn btn-info"
    type="button"
    data-bs-toggle="collapse"
    data-bs-target="#participants"
    aria-expanded="false"
    aria-controls="participants"
  >
    Afficher les participants
  </button>
  {# Tableau des participants en zone collapse #}
  <div class="collapse" id="participants">
    <table class="table table-striped">
      <thead>
        <tr>
          <th>Nom</th>
          <th>Prénom</th>
        </tr>
      </thead>
      <tbody>
        {% for ins in u_e.inscriptions %}
          <tr>
            <td>{{ ins.userId.name }}</td>
            <td>{{ ins.userId.surname }}</td>
          </tr>
        {% else %}
          <tr>
            <td colspan="2" class="text-center text-muted">Aucun étudiant.</td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </div>

  {# Section affichant tous les posts de l’UE #}
  <section class="mt-5">
    <a class="btn btn-secondary mt-4"
     href="{{ path('app_user_dashboard') }}">
    ← Retour au tableau de bord
    </a>
    <h2 class="h5 mb-3">Tous les posts</h2>
    {# Conteneur Stimulus pour la liste des posts #}
    <div class="posts-list"
         data-controller="post"
         data-post-target="list">
      {% for post in posts %}
        {% include 'post/item.html.twig' with { post: post } only %}
      {% else %}
        <p class="text-muted">Aucun post pour l’instant.</p>
      {% endfor %}
    </div>
  </section>
    </div>
</div>

{# On ajoute les modals partiels pour crée et modifier les posts#}
{% include 'ue_dashboard/modal.html.twig' %}
{% include 'ue_dashboard/editmodal.html.twig' %}
<script></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
{# Sciprt principal pour l'ouverture, submit et edit du post #}
<script>
  document.getElementById('create-post-btn').addEventListener('click', function(e) {
    e.preventDefault();
    console.log("Button create post clicked");

    // Get the UE ID from the data attribute
    const ueId = this.getAttribute('data-ue-id');
    console.log("UE ID:", ueId);

    // Send an AJAX request to fetch the form content
    fetch(`{{ path('app_post_new') }}?ue_id=${ueId}`)
      .then(response => response.json())
      .then(data => {
        console.log("inside thendata");
        console.log(data);
        if (data.success) {
          // Insert the form HTML into the modal body
          const decodedForm = new DOMParser().parseFromString(data.form, 'text/html').body.innerHTML;
          document.getElementById('modalContent').innerHTML = decodedForm;

          // Show the modal
          var postModal = new bootstrap.Modal(document.getElementById('postModal'));
          postModal.show();
        } else {
          console.error('Failed to load form.');
        }
      })
      .catch(error => console.error('Error fetching form:', error));
  });
  {# Submit du formulaire de création de post #}
  document.getElementById('savePost').addEventListener('click', function () {
  const form = document.querySelector('#modalContent form');
  const formData = new FormData(form);

  // Use the same UE ID and endpoint as the first fetch
  const ueId = document.getElementById('create-post-btn').getAttribute('data-ue-id');
  const actionUrl = `{{ path('app_post_new') }}?ue_id=${ueId}`;

  fetch(actionUrl, {
    method: form.method,
    body: formData
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      console.log("Post successfully created!");

      const postModal = bootstrap.Modal.getInstance(document.getElementById('postModal'));
      postModal.hide();
      location.reload();
    } else {
      console.error("Error from API:", data);
      if (data.form) {
        const decodedForm = new DOMParser().parseFromString(data.form, 'text/html').body.innerHTML;
        document.getElementById('modalContent').innerHTML = decodedForm;
      }
    }
  })
  .catch(error => {
    console.error("Error submitting form:", error);
  });
});

let currentPostId = 0;

{# Fonction pour ajouter les écouteurs d’événements aux boutons de modification #}
function addModifierButtonListener() {

    const buttons = document.querySelectorAll('.modifier-buttons');
    
    buttons.forEach(button => {
      
      button.addEventListener('click', function(e) {
        e.preventDefault()
        console.log('Modifier button clicked!');
        const postId = this.getAttribute('data-post-id');
        currentPostId = postId;
        console.log("Post ID:", postId);
        const url = `{{ path('app_post_edit', { id: '__POST_ID__' }) }}`.replace('__POST_ID__', postId);
        // Send an AJAX request to fetch the form content
        fetch(url)
          .then(response => response.json())
          .then(data => {
            console.log("inside thendata");
            console.log(data);
            if (data.success) {
              // Insert the form HTML into the modal body
              const decodedForm = new DOMParser().parseFromString(data.form, 'text/html').body.innerHTML;
              document.getElementById('modalContentEdit').innerHTML = decodedForm;

              // Show the modal
              var postModal = new bootstrap.Modal(document.getElementById('postModalEdit'));
              postModal.show();
            } else {
              console.error('Failed to load form.');
            }
          })
          .catch(error => console.error('Error fetching form:', error));
      });
    });
  }

  {# Submit formulaire modifier de post #}
  document.getElementById('modifyPost').addEventListener('click', function () {
  const form = document.querySelector('#modalContentEdit form');
  const formData = new FormData(form);

  const postId = currentPostId;
  const actionUrl = `{{ path('app_post_edit', { id: '__POST_ID__' }) }}`.replace('__POST_ID__', postId);

  fetch(actionUrl, {
    method: form.method,
    body: formData
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      console.log("Post successfully modified!");

      const postModal = bootstrap.Modal.getInstance(document.getElementById('postModalEdit'));
      postModal.hide();
      location.reload();
    } else {
      console.error("Error from API:", data);
      if (data.form) {
        // Re-insert the form with validation errors or other feedback
        const decodedForm = new DOMParser().parseFromString(data.form, 'text/html').body.innerHTML;
        document.getElementById('modalContentEdit').innerHTML = decodedForm;
      }
    }
  })
  .catch(error => {
    console.error("Error submitting form:", error);
  });
});

  document.addEventListener('DOMContentLoaded', addModifierButtonListener);
</script>
{% endblock %}
{% extends 'base.html.twig' %}

{% block title %}Tableau de bord Admin{% endblock %}

{% block body %}
  <div class="container">

  <div class="rectangle">
  <div data-controller="admin-dashboard" data-admin-dashboard-active-value="ue">
    <h1>Admin page</h1>
    <div class="mb-4">
      <button
        type="button"
        class="btn btn-primary me-2"
        data-action="click->admin-dashboard#loadUeTable"
      >
        Gérer les UE
      </button>

      <button
        type="button"
        class="btn btn-secondary"
        data-action="click->admin-dashboard#loadUserTable"
      >
        Gérer les étudiants
      </button>
    </div>
    <div id="ue-container" data-admin-dashboard-target="ueContainer">
      {{ render(path('app_u_e_admin_index', { _format:'html' })) }}
    </div>
    <div id="ue-table-container"></div>
    <div id="user-table-container"></div>
  </div>
  </div>
  </div>
  {% include 'admin_dashboard/modal.html.twig' %}
  {% include 'admin_dashboard/editmodal.html.twig' %}
{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <script type="module">
    import { Application, Controller } from 'https://cdn.jsdelivr.net/npm/@hotwired/stimulus@3.2.2/dist/stimulus.js';
    const application = Application.start();

    class AdminDashboardController extends Controller {
      loadUeTable(event) {
        event.preventDefault();
        this._fetchAndInject(
          '{{ path('app_u_e_admin_index') }}',
          'ue-table-container'
        );
      }

      loadUserTable(event) {
        event.preventDefault();
        this._fetchAndInject(
          '{{ path('app_user_admin_index') }}',
          'user-table-container'
        );
      }

      _fetchAndInject(url, containerId) {
        if (containerId === 'ue-table-container') {
          document.getElementById('user-table-container').innerHTML = '';
        } else {
          document.getElementById('ue-table-container').innerHTML = '';
        }

        fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' } })
          .then(r => {
            if (!r.ok) throw new Error(`Status ${r.status}`);
            return r.json();
          })
          .then(json => {
            if (json.success) {
              document.getElementById(containerId).innerHTML = json.html;
            } else {
              console.error('Erreur AJAX', json);
            }
          })
          .catch(err => console.error('Erreur AJAX', err));
      }
    }

    application.register('admin-dashboard', AdminDashboardController);



    document.addEventListener('click', function (event) {
    const target = event.target.closest('#btn-add-user');
    if (target) {
      event.preventDefault();


      fetch('{{ path("app_user_admin_new") }}', {
      headers: {
        'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.form) {
            // Insert the form HTML into the modal body
            const decodedForm = new DOMParser().parseFromString(data.form, 'text/html').body.innerHTML;
            document.getElementById('modalContent').innerHTML = decodedForm;

            // Show the modal
            const userModal = new bootstrap.Modal(document.getElementById('userModal'));
            userModal.show();
          } else {
            console.error('Failed to load user creation form.');
          }
        })
        .catch(error => console.error('Error fetching form:', error));
      }
   });

  document.getElementById('saveUser').addEventListener('click', function () {
  const form = document.querySelector('#modalContent form');
  const formData = new FormData(form);
  const actionUrl = '{{ path("app_user_admin_new") }}';

  fetch(actionUrl, {
    method: form.method,
    body: formData,
    headers: {
      'X-Requested-With': 'XMLHttpRequest'
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      console.log("User successfully created!");

      const userModal = bootstrap.Modal.getInstance(document.getElementById('userModal'));
      userModal.hide();

      // Refresh the page or update your user list
      location.reload();
    } else {
      console.error("Server returned error:", data);

      if (data.form) {
        const decodedForm = new DOMParser().parseFromString(data.form, 'text/html').body.innerHTML;
        document.getElementById('modalContent').innerHTML = decodedForm;
      }
    }
  })
  .catch(error => {
    console.error("Error submitting form:", error);
  });
});

  </script>
  
{% endblock %}
